name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run tests weekly to catch regressions
    - cron: '0 0 * * 0'

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-Dwarnings"

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta, 1.70.0]  # MSRV
        exclude:
          # Don't test beta/MSRV on all platforms to save CI time
          - os: windows-latest
            rust: beta
          - os: windows-latest  
            rust: 1.70.0
          - os: macos-latest
            rust: beta
          - os: macos-latest
            rust: 1.70.0

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.os }}-${{ matrix.rust }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y bc time

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # macOS already has bc and time
        echo "No additional dependencies needed"

    - name: Check formatting
      run: cargo fmt --all -- --check
      if: matrix.rust == 'stable'

    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
      if: matrix.rust == 'stable'

    - name: Build
      run: cargo build --verbose

    - name: Run tests
      run: cargo test --verbose

    - name: Build release
      run: cargo build --release --verbose

    - name: Test release binary exists
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          test -f target/release/sort.exe
        else
          test -f target/release/sort
        fi

    - name: Basic functionality test
      shell: bash
      run: |
        # Create test data
        echo -e "3\n1\n2" > test.txt
        
        # Test basic sorting
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          ./target/release/sort.exe test.txt > output.txt
        else
          ./target/release/sort test.txt > output.txt
        fi
        
        # Check output
        expected="1\n2\n3"
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          # Windows line endings
          if ! echo -e "1\r\n2\r\n3" | cmp -s - output.txt; then
            echo "Basic sort test failed"
            cat output.txt
            exit 1
          fi
        else
          if ! echo -e "$expected" | cmp -s - output.txt; then
            echo "Basic sort test failed"
            cat output.txt
            exit 1
          fi
        fi
        echo "✅ Basic functionality test passed"

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y bc time coreutils

    - name: Build release
      run: cargo build --release

    - name: Run benchmarks
      run: |
        chmod +x benchmark.sh
        ./benchmark.sh 2>&1 | tee benchmark_results.txt

    - name: Check performance regression
      run: |
        # Extract performance data and check for major regressions
        # This is a placeholder - would implement actual regression detection
        echo "Benchmark completed successfully"
        grep -E "(✓|✗)" benchmark_results.txt || true

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark_results.txt

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Generate code coverage
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: lcov.info
        fail_ci_if_error: true

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Build documentation
      run: cargo doc --no-deps --all-features

    - name: Deploy documentation (main branch only)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Build release binaries
      run: cargo build --release

    - name: Create release archive (Linux)
      run: |
        mkdir -p dist
        tar -czf dist/rust-sort-linux-x86_64.tar.gz -C target/release sort
        echo "Linux archive created: dist/rust-sort-linux-x86_64.tar.gz"

    - name: Generate changelog
      id: changelog
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Generate changelog (placeholder - would use actual changelog tool)
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "## What's Changed in $VERSION" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "* Performance improvements and bug fixes" >> $GITHUB_OUTPUT
        echo "* See commit history for detailed changes" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.changelog.outputs.version }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false

  build-matrix:
    name: Build Release Binaries
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            name: linux-x86_64-musl
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x86_64
            ext: .exe
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: macos-aarch64

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.target }}

    - name: Install musl tools (Linux musl only)
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: sudo apt-get update && sudo apt-get install -y musl-tools

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Create release archive
      shell: bash
      run: |
        mkdir -p dist
        binary_name="sort${{ matrix.ext }}"
        archive_name="rust-sort-${{ matrix.name }}.tar.gz"
        
        cd target/${{ matrix.target }}/release
        tar -czf "../../../dist/$archive_name" "$binary_name"
        cd -
        
        echo "Created archive: dist/$archive_name"
        ls -la dist/

    - name: Upload release artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-${{ matrix.name }}
        path: dist/rust-sort-${{ matrix.name }}.tar.gz

  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}